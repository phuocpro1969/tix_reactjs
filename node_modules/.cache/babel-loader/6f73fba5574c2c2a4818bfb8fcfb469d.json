{"ast":null,"code":"import { act, fireEvent } from \"@testing-library/react\";\nconst initialState = {\n  bookingInfo: null,\n  listSeat: [],\n  listSeatSelected: [],\n  total: 0,\n  activeNotification: 0\n};\n\nconst BookingReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_BOOKING_SUCCESS\":\n      {\n        let newBookingInfo = { ...action.payload.thongTinPhim\n        };\n        let newListSeat = [...action.payload.danhSachGhe];\n        return { ...state,\n          bookingInfo: newBookingInfo,\n          listSeat: newListSeat\n        };\n      }\n\n    case \"CHOOSE_SEAT\":\n      {\n        // console.log(action.payload);\n        let index = state.listSeatSelected.findIndex(ghe => ghe.maGhe === action.payload.maGhe);\n        let newListSeatSelected = [];\n        newListSeatSelected = [...state.listSeatSelected];\n        let activeNotiFy = 0;\n\n        if (index === -1) {\n          state.total += action.payload.giaVe;\n          newListSeatSelected.push(action.payload);\n          newListSeatSelected.sort(function (a, b) {\n            return parseInt(a.stt) - parseInt(b.stt);\n          });\n          console.log(newListSeatSelected);\n\n          for (let i = 0; i < newListSeatSelected.length - 1; i++) {\n            if (newListSeatSelected[i].codeRow === newListSeatSelected[i + 1].codeRow) {\n              if (parseInt(newListSeatSelected[i].stt) + 2 === parseInt(newListSeatSelected[i + 1].stt)) {\n                activeNotiFy += 1;\n              }\n            }\n          }\n\n          console.log(activeNotiFy);\n          console.log(activeNotification);\n        } else {\n          state.total -= action.payload.giaVe;\n          newListSeatSelected.splice(index, 1);\n        }\n\n        state.listSeatSelected = newListSeatSelected;\n        return { ...state,\n          total: state.total,\n          activeNotification: state.activeNotification\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = BookingReducer;\nexport default BookingReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookingReducer\");","map":{"version":3,"sources":["C:/Users/phuoc/OneDrive/Máy tính/tix_reactjs/src/redux/reducers/BookingReducer.js"],"names":["act","fireEvent","initialState","bookingInfo","listSeat","listSeatSelected","total","activeNotification","BookingReducer","state","action","type","newBookingInfo","payload","thongTinPhim","newListSeat","danhSachGhe","index","findIndex","ghe","maGhe","newListSeatSelected","activeNotiFy","giaVe","push","sort","a","b","parseInt","stt","console","log","i","length","codeRow","splice"],"mappings":"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","sourcesContent":["import { act, fireEvent } from \"@testing-library/react\";\r\n\r\nconst initialState = {\r\n  bookingInfo: null,\r\n  listSeat: [],\r\n  listSeatSelected: [],\r\n  total: 0,\r\n  activeNotification: 0,\r\n};\r\n\r\nconst BookingReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_BOOKING_SUCCESS\": {\r\n      let newBookingInfo = { ...action.payload.thongTinPhim };\r\n      let newListSeat = [...action.payload.danhSachGhe];\r\n      return { ...state, bookingInfo: newBookingInfo, listSeat: newListSeat };\r\n    }\r\n    case \"CHOOSE_SEAT\": {\r\n      // console.log(action.payload);\r\n      let index = state.listSeatSelected.findIndex(\r\n        (ghe) => ghe.maGhe === action.payload.maGhe\r\n      );\r\n      let newListSeatSelected = [];\r\n      newListSeatSelected = [...state.listSeatSelected];\r\n      let activeNotiFy = 0;\r\n      if (index === -1) {\r\n        state.total += action.payload.giaVe;\r\n        newListSeatSelected.push(action.payload);\r\n        newListSeatSelected.sort(function (a, b) {\r\n          return parseInt(a.stt) - parseInt(b.stt);\r\n        });\r\n        console.log(newListSeatSelected);\r\n        for (let i = 0; i < newListSeatSelected.length - 1; i++) {\r\n          if (\r\n            newListSeatSelected[i].codeRow ===\r\n            newListSeatSelected[i + 1].codeRow\r\n          ) {\r\n            if (\r\n              parseInt(newListSeatSelected[i].stt) + 2 ===\r\n              parseInt(newListSeatSelected[i + 1].stt)\r\n            ) {\r\n              activeNotiFy += 1;\r\n            }\r\n          }\r\n        }\r\n        console.log(activeNotiFy);\r\n        console.log(activeNotification)\r\n      } else {\r\n        state.total -= action.payload.giaVe;\r\n        newListSeatSelected.splice(index, 1);\r\n      }\r\n      state.listSeatSelected = newListSeatSelected;\r\n\r\n      return {\r\n        ...state,\r\n        total: state.total,\r\n        activeNotification: state.activeNotification,\r\n      };\r\n    }\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\nexport default BookingReducer;\r\n"]},"metadata":{},"sourceType":"module"}