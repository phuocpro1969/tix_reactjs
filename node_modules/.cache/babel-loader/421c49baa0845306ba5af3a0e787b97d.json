{"ast":null,"code":"import { act, fireEvent } from \"@testing-library/react\";\nconst initialState = {\n  bookingInfo: null,\n  listSeat: [],\n  listSeatSelected: [],\n  total: 0,\n  countNonMid: 0,\n  activeNotification: 0\n};\n\nconst BookingReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_BOOKING_SUCCESS\":\n      {\n        let newBookingInfo = { ...action.payload.thongTinPhim\n        };\n        let newListSeat = [...action.payload.danhSachGhe];\n        return { ...state,\n          bookingInfo: newBookingInfo,\n          listSeat: newListSeat\n        };\n      }\n\n    case \"CHOOSE_SEAT\":\n      {\n        function getBookedBySTT(stt) {\n          return state.listSeat.filter(item => {\n            if (item.stt = stt) return item.daDat;\n          });\n        }\n\n        let index = state.listSeatSelected.findIndex(ghe => ghe.maGhe === action.payload.maGhe);\n        let newListSeatSelected = [];\n        newListSeatSelected = [...state.listSeatSelected];\n        let activate = 0;\n        let count = 0;\n\n        if (index === -1) {\n          state.total += action.payload.giaVe;\n          newListSeatSelected.push(action.payload);\n          newListSeatSelected.sort(function (a, b) {\n            return parseInt(a.stt) - parseInt(b.stt);\n          });\n\n          for (let i = 0; i < newListSeatSelected.length - 1; i++) {\n            if (newListSeatSelected[i].codeRow === newListSeatSelected[i + 1].codeRow) {\n              if (parseInt(newListSeatSelected[i].stt) + 2 === parseInt(newListSeatSelected[i + 1].stt)) {\n                console.log(getBookedBySTT((parseInt(newListSeatSelected[i].stt) + 1).toString()));\n                count += 1;\n              }\n            }\n          }\n\n          if (count > state.countNonMid) {\n            activate = 1;\n          }\n        } else {\n          state.total -= action.payload.giaVe;\n          newListSeatSelected.splice(index, 1);\n        }\n\n        state.listSeatSelected = newListSeatSelected;\n        return { ...state,\n          total: state.total,\n          countNonMid: count,\n          activeNotification: activate\n        };\n      }\n\n    case \"RESET_NOTIFY\":\n      {\n        return { ...state,\n          activeNotification: action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = BookingReducer;\nexport default BookingReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookingReducer\");","map":{"version":3,"sources":["C:/Users/phuoc/OneDrive/Máy tính/tix_reactjs/src/redux/reducers/BookingReducer.js"],"names":["act","fireEvent","initialState","bookingInfo","listSeat","listSeatSelected","total","countNonMid","activeNotification","BookingReducer","state","action","type","newBookingInfo","payload","thongTinPhim","newListSeat","danhSachGhe","getBookedBySTT","stt","filter","item","daDat","index","findIndex","ghe","maGhe","newListSeatSelected","activate","count","giaVe","push","sort","a","b","parseInt","i","length","codeRow","console","log","toString","splice"],"mappings":"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","sourcesContent":["import { act, fireEvent } from \"@testing-library/react\";\r\n\r\nconst initialState = {\r\n  bookingInfo: null,\r\n  listSeat: [],\r\n  listSeatSelected: [],\r\n  total: 0,\r\n  countNonMid: 0,\r\n  activeNotification: 0,\r\n};\r\n\r\nconst BookingReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_BOOKING_SUCCESS\": {\r\n      let newBookingInfo = { ...action.payload.thongTinPhim };\r\n      let newListSeat = [...action.payload.danhSachGhe];\r\n      return { ...state, bookingInfo: newBookingInfo, listSeat: newListSeat };\r\n    }\r\n    case \"CHOOSE_SEAT\": {\r\n\r\n      function getBookedBySTT(stt) {\r\n        return state.listSeat.filter(item => {\r\n          if (item.stt = stt)\r\n            return item.daDat;\r\n        })\r\n      }\r\n\r\n      let index = state.listSeatSelected.findIndex(\r\n        (ghe) => ghe.maGhe === action.payload.maGhe\r\n      );\r\n      let newListSeatSelected = [];\r\n      newListSeatSelected = [...state.listSeatSelected];\r\n      let activate = 0;\r\n      let count = 0;\r\n      if (index === -1) {\r\n        state.total += action.payload.giaVe;\r\n        newListSeatSelected.push(action.payload);\r\n        newListSeatSelected.sort(function (a, b) {\r\n          return parseInt(a.stt) - parseInt(b.stt);\r\n        });\r\n\r\n        for (let i = 0; i < newListSeatSelected.length - 1; i++) {\r\n          if (\r\n            newListSeatSelected[i].codeRow ===\r\n            newListSeatSelected[i + 1].codeRow\r\n          ) {\r\n            if (\r\n              parseInt(newListSeatSelected[i].stt) + 2 ===\r\n              parseInt(newListSeatSelected[i + 1].stt)\r\n            ) {\r\n              console.log(getBookedBySTT((parseInt(newListSeatSelected[i].stt) + 1).toString()));\r\n              count += 1;\r\n            }\r\n          }\r\n        }\r\n        if (count > state.countNonMid) {\r\n          activate = 1;\r\n        }\r\n      } else {\r\n        state.total -= action.payload.giaVe;\r\n        newListSeatSelected.splice(index, 1);\r\n      }\r\n      state.listSeatSelected = newListSeatSelected;\r\n\r\n      return {\r\n        ...state,\r\n        total: state.total,\r\n        countNonMid: count,\r\n        activeNotification: activate,\r\n      };\r\n    }\r\n    case \"RESET_NOTIFY\": {\r\n      return { ...state, activeNotification: action.payload }\r\n    }\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\nexport default BookingReducer;\r\n"]},"metadata":{},"sourceType":"module"}