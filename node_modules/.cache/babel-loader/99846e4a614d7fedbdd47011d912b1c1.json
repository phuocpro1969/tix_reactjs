{"ast":null,"code":"\"use strict\";\n\nfunction padWithZeros(vNumber, width) {\n  var numAsString = vNumber.toString();\n\n  while (numAsString.length < width) {\n    numAsString = \"0\" + numAsString;\n  }\n\n  return numAsString;\n}\n\nfunction addZero(vNumber) {\n  return padWithZeros(vNumber, 2);\n}\n/**\n * Formats the TimeOffset\n * Thanks to http://www.svendtofte.com/code/date_format/\n * @private\n */\n\n\nfunction offset(timezoneOffset) {\n  var os = Math.abs(timezoneOffset);\n  var h = String(Math.floor(os / 60));\n  var m = String(os % 60);\n\n  if (h.length === 1) {\n    h = \"0\" + h;\n  }\n\n  if (m.length === 1) {\n    m = \"0\" + m;\n  }\n\n  return timezoneOffset < 0 ? \"+\" + h + m : \"-\" + h + m;\n}\n\nfunction asString(format, date) {\n  if (typeof format !== \"string\") {\n    date = format;\n    format = module.exports.ISO8601_FORMAT;\n  }\n\n  if (!date) {\n    date = module.exports.now();\n  } // Issue # 14 - Per ISO8601 standard, the time string should be local time\n  // with timezone info.\n  // See https://en.wikipedia.org/wiki/ISO_8601 section \"Time offsets from UTC\"\n\n\n  var vDay = addZero(date.getDate());\n  var vMonth = addZero(date.getMonth() + 1);\n  var vYearLong = addZero(date.getFullYear());\n  var vYearShort = addZero(vYearLong.substring(2, 4));\n  var vYear = format.indexOf(\"yyyy\") > -1 ? vYearLong : vYearShort;\n  var vHour = addZero(date.getHours());\n  var vMinute = addZero(date.getMinutes());\n  var vSecond = addZero(date.getSeconds());\n  var vMillisecond = padWithZeros(date.getMilliseconds(), 3);\n  var vTimeZone = offset(date.getTimezoneOffset());\n  var formatted = format.replace(/dd/g, vDay).replace(/MM/g, vMonth).replace(/y{1,4}/g, vYear).replace(/hh/g, vHour).replace(/mm/g, vMinute).replace(/ss/g, vSecond).replace(/SSS/g, vMillisecond).replace(/O/g, vTimeZone);\n  return formatted;\n}\n\nfunction setDatePart(date, part, value, local) {\n  date['set' + (local ? '' : 'UTC') + part](value);\n}\n\nfunction extractDateParts(pattern, str, missingValuesDate) {\n  // Javascript Date object doesn't support custom timezone.  Sets all felds as\n  // GMT based to begin with.  If the timezone offset is provided, then adjust\n  // it using provided timezone, otherwise, adjust it with the system timezone.\n  var local = pattern.indexOf('O') < 0;\n  var matchers = [{\n    pattern: /y{1,4}/,\n    regexp: \"\\\\d{1,4}\",\n    fn: function (date, value) {\n      setDatePart(date, 'FullYear', value, local);\n    }\n  }, {\n    pattern: /MM/,\n    regexp: \"\\\\d{1,2}\",\n    fn: function (date, value) {\n      setDatePart(date, 'Month', value - 1, local);\n    }\n  }, {\n    pattern: /dd/,\n    regexp: \"\\\\d{1,2}\",\n    fn: function (date, value) {\n      setDatePart(date, 'Date', value, local);\n    }\n  }, {\n    pattern: /hh/,\n    regexp: \"\\\\d{1,2}\",\n    fn: function (date, value) {\n      setDatePart(date, 'Hours', value, local);\n    }\n  }, {\n    pattern: /mm/,\n    regexp: \"\\\\d\\\\d\",\n    fn: function (date, value) {\n      setDatePart(date, 'Minutes', value, local);\n    }\n  }, {\n    pattern: /ss/,\n    regexp: \"\\\\d\\\\d\",\n    fn: function (date, value) {\n      setDatePart(date, 'Seconds', value, local);\n    }\n  }, {\n    pattern: /SSS/,\n    regexp: \"\\\\d\\\\d\\\\d\",\n    fn: function (date, value) {\n      setDatePart(date, 'Milliseconds', value, local);\n    }\n  }, {\n    pattern: /O/,\n    regexp: \"[+-]\\\\d{3,4}|Z\",\n    fn: function (date, value) {\n      if (value === \"Z\") {\n        value = 0;\n      }\n\n      var offset = Math.abs(value);\n      var timezoneOffset = (value > 0 ? -1 : 1) * (offset % 100 + Math.floor(offset / 100) * 60); // Per ISO8601 standard: UTC = local time - offset\n      //\n      // For example, 2000-01-01T01:00:00-0700\n      //   local time: 2000-01-01T01:00:00\n      //   ==> UTC   : 2000-01-01T08:00:00 ( 01 - (-7) = 8 )\n      //\n      // To make it even more confusing, the date.getTimezoneOffset() is\n      // opposite sign of offset string in the ISO8601 standard.  So if offset\n      // is '-0700' the getTimezoneOffset() would be (+)420. The line above\n      // calculates timezoneOffset to matche Javascript's behavior.\n      //\n      // The date/time of the input is actually the local time, so the date\n      // object that was constructed is actually local time even thought the\n      // UTC setters are used.  This means the date object's internal UTC\n      // representation was wrong.  It needs to be fixed by substracting the\n      // offset (or adding the offset minutes as they are opposite sign).\n      //\n      // Note: the time zone has to be processed after all other fileds are\n      // set.  The result would be incorrect if the offset was calculated\n      // first then overriden by the other filed setters.\n\n      date.setUTCMinutes(date.getUTCMinutes() + timezoneOffset);\n    }\n  }];\n  var parsedPattern = matchers.reduce(function (p, m) {\n    if (m.pattern.test(p.regexp)) {\n      m.index = p.regexp.match(m.pattern).index;\n      p.regexp = p.regexp.replace(m.pattern, \"(\" + m.regexp + \")\");\n    } else {\n      m.index = -1;\n    }\n\n    return p;\n  }, {\n    regexp: pattern,\n    index: []\n  });\n  var dateFns = matchers.filter(function (m) {\n    return m.index > -1;\n  });\n  dateFns.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  var matcher = new RegExp(parsedPattern.regexp);\n  var matches = matcher.exec(str);\n\n  if (matches) {\n    var date = missingValuesDate || module.exports.now();\n    dateFns.forEach(function (f, i) {\n      f.fn(date, matches[i + 1]);\n    });\n    return date;\n  }\n\n  throw new Error(\"String '\" + str + \"' could not be parsed as '\" + pattern + \"'\");\n}\n\nfunction parse(pattern, str, missingValuesDate) {\n  if (!pattern) {\n    throw new Error(\"pattern must be supplied\");\n  }\n\n  return extractDateParts(pattern, str, missingValuesDate);\n}\n/**\n * Used for testing - replace this function with a fixed date.\n */\n\n\nfunction now() {\n  return new Date();\n}\n\nmodule.exports = asString;\nmodule.exports.asString = asString;\nmodule.exports.parse = parse;\nmodule.exports.now = now;\nmodule.exports.ISO8601_FORMAT = \"yyyy-MM-ddThh:mm:ss.SSS\";\nmodule.exports.ISO8601_WITH_TZ_OFFSET_FORMAT = \"yyyy-MM-ddThh:mm:ss.SSSO\";\nmodule.exports.DATETIME_FORMAT = \"dd MM yyyy hh:mm:ss.SSS\";\nmodule.exports.ABSOLUTETIME_FORMAT = \"hh:mm:ss.SSS\";","map":{"version":3,"sources":["D:/tix-app/node_modules/date-format/lib/index.js"],"names":["padWithZeros","vNumber","width","numAsString","toString","length","addZero","offset","timezoneOffset","os","Math","abs","h","String","floor","m","asString","format","date","module","exports","ISO8601_FORMAT","now","vDay","getDate","vMonth","getMonth","vYearLong","getFullYear","vYearShort","substring","vYear","indexOf","vHour","getHours","vMinute","getMinutes","vSecond","getSeconds","vMillisecond","getMilliseconds","vTimeZone","getTimezoneOffset","formatted","replace","setDatePart","part","value","local","extractDateParts","pattern","str","missingValuesDate","matchers","regexp","fn","setUTCMinutes","getUTCMinutes","parsedPattern","reduce","p","test","index","match","dateFns","filter","sort","a","b","matcher","RegExp","matches","exec","forEach","f","i","Error","parse","Date","ISO8601_WITH_TZ_OFFSET_FORMAT","DATETIME_FORMAT","ABSOLUTETIME_FORMAT"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction padWithZeros(vNumber, width) {\n  var numAsString = vNumber.toString();\n  while (numAsString.length < width) {\n    numAsString = \"0\" + numAsString;\n  }\n  return numAsString;\n}\n\nfunction addZero(vNumber) {\n  return padWithZeros(vNumber, 2);\n}\n\n/**\n * Formats the TimeOffset\n * Thanks to http://www.svendtofte.com/code/date_format/\n * @private\n */\nfunction offset(timezoneOffset) {\n  var os = Math.abs(timezoneOffset);\n  var h = String(Math.floor(os / 60));\n  var m = String(os % 60);\n  if (h.length === 1) {\n    h = \"0\" + h;\n  }\n  if (m.length === 1) {\n    m = \"0\" + m;\n  }\n  return timezoneOffset < 0 ? \"+\" + h + m : \"-\" + h + m;\n}\n\nfunction asString(format, date) {\n  if (typeof format !== \"string\") {\n    date = format;\n    format = module.exports.ISO8601_FORMAT;\n  }\n  if (!date) {\n    date = module.exports.now();\n  }\n\n  // Issue # 14 - Per ISO8601 standard, the time string should be local time\n  // with timezone info.\n  // See https://en.wikipedia.org/wiki/ISO_8601 section \"Time offsets from UTC\"\n\n  var vDay = addZero(date.getDate());\n  var vMonth = addZero(date.getMonth() + 1);\n  var vYearLong = addZero(date.getFullYear());\n  var vYearShort = addZero(vYearLong.substring(2, 4));\n  var vYear = format.indexOf(\"yyyy\") > -1 ? vYearLong : vYearShort;\n  var vHour = addZero(date.getHours());\n  var vMinute = addZero(date.getMinutes());\n  var vSecond = addZero(date.getSeconds());\n  var vMillisecond = padWithZeros(date.getMilliseconds(), 3);\n  var vTimeZone = offset(date.getTimezoneOffset());\n  var formatted = format\n    .replace(/dd/g, vDay)\n    .replace(/MM/g, vMonth)\n    .replace(/y{1,4}/g, vYear)\n    .replace(/hh/g, vHour)\n    .replace(/mm/g, vMinute)\n    .replace(/ss/g, vSecond)\n    .replace(/SSS/g, vMillisecond)\n    .replace(/O/g, vTimeZone);\n  return formatted;\n}\n\nfunction setDatePart(date, part, value, local) {\n  date['set' + (local ? '' : 'UTC') + part](value);\n}\n\nfunction extractDateParts(pattern, str, missingValuesDate) {\n  // Javascript Date object doesn't support custom timezone.  Sets all felds as\n  // GMT based to begin with.  If the timezone offset is provided, then adjust\n  // it using provided timezone, otherwise, adjust it with the system timezone.\n  var local = pattern.indexOf('O') < 0;\n  var matchers = [\n    {\n      pattern: /y{1,4}/,\n      regexp: \"\\\\d{1,4}\",\n      fn: function(date, value) {\n        setDatePart(date, 'FullYear', value, local);\n      }\n    },\n    {\n      pattern: /MM/,\n      regexp: \"\\\\d{1,2}\",\n      fn: function(date, value) {\n        setDatePart(date, 'Month', (value - 1), local);\n      }\n    },\n    {\n      pattern: /dd/,\n      regexp: \"\\\\d{1,2}\",\n      fn: function(date, value) {\n        setDatePart(date, 'Date', value, local);\n      }\n    },\n    {\n      pattern: /hh/,\n      regexp: \"\\\\d{1,2}\",\n      fn: function(date, value) {\n        setDatePart(date, 'Hours', value, local);\n      }\n    },\n    {\n      pattern: /mm/,\n      regexp: \"\\\\d\\\\d\",\n      fn: function(date, value) {\n        setDatePart(date, 'Minutes', value, local);\n      }\n    },\n    {\n      pattern: /ss/,\n      regexp: \"\\\\d\\\\d\",\n      fn: function(date, value) {\n        setDatePart(date, 'Seconds', value, local);\n      }\n    },\n    {\n      pattern: /SSS/,\n      regexp: \"\\\\d\\\\d\\\\d\",\n      fn: function(date, value) {\n        setDatePart(date, 'Milliseconds', value, local);\n      }\n    },\n    {\n      pattern: /O/,\n      regexp: \"[+-]\\\\d{3,4}|Z\",\n      fn: function(date, value) {\n        if (value === \"Z\") {\n          value = 0;\n        }\n        var offset = Math.abs(value);\n        var timezoneOffset = (value > 0 ? -1 :  1 ) * ((offset % 100) + Math.floor(offset / 100) * 60);\n        // Per ISO8601 standard: UTC = local time - offset\n        //\n        // For example, 2000-01-01T01:00:00-0700\n        //   local time: 2000-01-01T01:00:00\n        //   ==> UTC   : 2000-01-01T08:00:00 ( 01 - (-7) = 8 )\n        //\n        // To make it even more confusing, the date.getTimezoneOffset() is\n        // opposite sign of offset string in the ISO8601 standard.  So if offset\n        // is '-0700' the getTimezoneOffset() would be (+)420. The line above\n        // calculates timezoneOffset to matche Javascript's behavior.\n        //\n        // The date/time of the input is actually the local time, so the date\n        // object that was constructed is actually local time even thought the\n        // UTC setters are used.  This means the date object's internal UTC\n        // representation was wrong.  It needs to be fixed by substracting the\n        // offset (or adding the offset minutes as they are opposite sign).\n        //\n        // Note: the time zone has to be processed after all other fileds are\n        // set.  The result would be incorrect if the offset was calculated\n        // first then overriden by the other filed setters.\n        date.setUTCMinutes(date.getUTCMinutes() + timezoneOffset);\n      }\n    }\n  ];\n\n  var parsedPattern = matchers.reduce(\n    function(p, m) {\n      if (m.pattern.test(p.regexp)) {\n        m.index = p.regexp.match(m.pattern).index;\n        p.regexp = p.regexp.replace(m.pattern, \"(\" + m.regexp + \")\");\n      } else {\n        m.index = -1;\n      }\n      return p;\n    },\n    { regexp: pattern, index: [] }\n  );\n\n  var dateFns = matchers.filter(function(m) {\n    return m.index > -1;\n  });\n  dateFns.sort(function(a, b) {\n    return a.index - b.index;\n  });\n\n  var matcher = new RegExp(parsedPattern.regexp);\n  var matches = matcher.exec(str);\n  if (matches) {\n    var date = missingValuesDate || module.exports.now();\n    dateFns.forEach(function(f, i) {\n      f.fn(date, matches[i + 1]);\n    });\n\n    return date;\n  }\n\n  throw new Error(\n    \"String '\" + str + \"' could not be parsed as '\" + pattern + \"'\"\n  );\n}\n\nfunction parse(pattern, str, missingValuesDate) {\n  if (!pattern) {\n    throw new Error(\"pattern must be supplied\");\n  }\n\n  return extractDateParts(pattern, str, missingValuesDate);\n}\n\n/**\n * Used for testing - replace this function with a fixed date.\n */\nfunction now() {\n  return new Date();\n}\n\nmodule.exports = asString;\nmodule.exports.asString = asString;\nmodule.exports.parse = parse;\nmodule.exports.now = now;\nmodule.exports.ISO8601_FORMAT = \"yyyy-MM-ddThh:mm:ss.SSS\";\nmodule.exports.ISO8601_WITH_TZ_OFFSET_FORMAT = \"yyyy-MM-ddThh:mm:ss.SSSO\";\nmodule.exports.DATETIME_FORMAT = \"dd MM yyyy hh:mm:ss.SSS\";\nmodule.exports.ABSOLUTETIME_FORMAT = \"hh:mm:ss.SSS\";\n"]},"metadata":{},"sourceType":"script"}